import { Box, Button, Typography } from '@mui/material';
import { useEffect, useState } from 'react';
import { BrowserRouter, Navigate, Route, Routes } from 'react-router-dom';
import { Socket } from 'socket.io-client';

import VacuumMap from './components/VacuumMap/VacuumMap';
import Dashboard from './pages/Dashboard/Dashboard';
import websocketService from './services/websocket.service';
import { useAppDispatch } from './store/hooks';
import { getVacuumClean, getVacuumMap, setVacuumClean, setVacuumMap } from './store/vacuum/vacuumSlice';
import { WebSocketContext } from './utils/socket.utils';

const App = () => {
  const [socket, setSocket] = useState<Socket>();
  const dispatch = useAppDispatch();

  const { data: mapData } = getVacuumMap();

  useEffect(() => {
    setSocket(websocketService());
  }, []);

  useEffect(() => {
    // socket &&
    //   socket.on('connect', () => {
    //     console.log('connected! ', socket.id);
    //     socket.emit('getMajorMap');
    //   });

    // socket &&
    //   socket.on('vacuumMap', (payload) => {
    //     console.log('receive vacuumMap', payload);
    //     dispatch(setVacuumMap(payload));
    //   });
    dispatch(
      setVacuumMap(
        '',
      ),
    );
  }, [socket]);

  return (
    <>
      {socket && (
        <WebSocketContext.Provider value={socket}>
          <BrowserRouter>
            <Routes>
              <Route path="/" element={<Dashboard />} />
              {/* <Route path="*" element={<Navigate to="/" replace />} /> */}
            </Routes>
          </BrowserRouter>
        </WebSocketContext.Provider>
      )}
      {!socket && <Typography>connection to websocket server in progress...</Typography>}
    </>
  );
};

export default App;
